package jm.task.core.jdbc.dao;

import jakarta.persistence.criteria.*;
import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;
import org.hibernate.Session;
import org.hibernate.jdbc.Work;
import java.sql.*;
import java.util.List;

public class UserDaoHibernateImpl implements UserDao {

    public UserDaoHibernateImpl() {}

    @Override
    public void createUsersTable() {
        try (Session session = Util.getSessionFactory().openSession()) {
            session.doWork(new Work () {
                @Override
                public void execute(Connection connection) throws SQLException {
                   Statement statement = connection.createStatement();
                   statement.executeUpdate("CREATE TABLE IF NOT EXISTS users (" +
                           "id INTEGER  GENERATED BY DEFAULT AS IDENTITY," +
                           "firstName VARCHAR(255)," +
                           "lastName VARCHAR(255)," +
                           "age SMALLINT)");
                   connection.commit();
                   connection.close();
                }
            });
        } catch (Exception e) {
            System.out.println("Что-то не так при подключении к БД! " + e);
        }
    }

    @Override
    public void dropUsersTable() {
        try (Session session = Util.getSessionFactory().openSession()) {
            session.doWork(new Work () {
                @Override
                public void execute(Connection connection) throws SQLException {
                    Statement statement = connection.createStatement();
                    statement.executeUpdate("DROP TABLE IF EXISTS users");
                    connection.commit();
                    connection.close();
                }
            });
        } catch (Exception e) {
            System.out.println("Что-то не так при подключении к БД! " + e);
        }
    }

    @Override
    public void saveUser(String name, String lastName, byte age) {
        Session session = Util.getSessionFactory().openSession();
        session.beginTransaction();
        User user = new User();
        user.setName(name);
        user.setLastName(lastName);
        user.setAge(age);
        session.persist(user);
        session.getTransaction().commit();
        session.close();
    }

    @Override
    public void removeUserById(long id) {
        Session session = Util.getSessionFactory().openSession();
        session.beginTransaction();
        User user = new User();
        user = session.get(User.class, id);
        session.remove(user);
        session.getTransaction().commit();
        session.close();
    }

    @Override
    public List<User> getAllUsers() {
        Session session = Util.getSessionFactory().openSession();
        session.beginTransaction();
        CriteriaBuilder builder = session.getCriteriaBuilder();
        CriteriaQuery<User> query = builder.createQuery(User.class);
        Root<User> root = query.from(User.class);
        query.select(root);
        List<User> list = session.createQuery(query).getResultList();
        session.close();
        return list;
    }

    @Override
    public void cleanUsersTable() {
        try (Session session = Util.getSessionFactory().openSession()) {
            session.doWork(new Work() {
                @Override
                public void execute(Connection connection) throws SQLException {
                    Statement statement = connection.createStatement();
                    statement.executeUpdate("TRUNCATE users RESTART IDENTITY");
                    connection.commit();
                    connection.close();
                }
            });
        } catch (Exception e) {
            System.out.println("Что-то не так при подключении к БД! " + e);
        }
    }
}
